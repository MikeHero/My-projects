Map-Reduce Pthreads

	This program was made in C/C++. The application was designed to function as a multithreading
program. Its purpose was to simulate the Map-Reduce model used by Google for big ammounts of data.


-----------------------------------------------------------------------------------------------------

	Salut! In rezolvarea temei am declarat ca un vector de pointeri catre
fisierele din care fac citirea, un vector de liste de elemente de tip long long(am vazut numere 
mari in teste) unde fiecare thread de tip Map poate sa adauge un numar care este putere la a doua, 
la a treia... la a r+1 perfect, unde r = numarul de threaduri de tip reducer.Conform indicatiei 
de pe forum, am folosit o lista comuna pentru toate threadurile de tip mapper, o lista comuna pentru
la a doua, la a treia...Ca sa verific daca un numar x, este putere perfecta, fac o cautare binara pe
un interval de forma 1 si radical din x + 1.Ridic mijlocul la exponentul dorit pentru care verific 
ca x sa fie putere perfecta.Daca e mai mic, transpun intervalul in partea dreapta, daca e mai mare, 
ma duc in stanga.Verific mereu mijlocul.Daca e putere perfecta, threadul de tip map il baga in lista
comuna specifica acelui exponent.
	Aceasta lista este o linie din matricea mea "vector_liste".Linia 0 corespunde exponentului 2,
linia 1 -> exponentului 3... .Pentru a cunoaste care este prima pozitie libera din lista mea, am un
vector "indice_lista" care imi contorizeaza indexul primei pozitii libere din fiecare lista in 
parte.Cand adaug un element am vector_liste[exponent - 2][indice_lista[exponent - 2]++] = numar_adaugat
Aceasta verificare a elementelor o face fiecare mapper individual si ca sa nu exista conflicte in care
mai multe threaduri ar scrie la aceeasi zona de memorie, singularizam accesul cu un mutex, inainte
si dupa asignarea de mai sus.Rutina pe care o executa fiecare thread are 2 ifuri, unul pentru
mapperi, unul pentru reduceri si intre ele o bariera de dimensiune m + r (unde m = numarul de 
threaduri de tip map).Threadurile de tip map intra pe primul if destinate rutinei mapurilor, isi fac
executia si ajung la pthread_exit, dar nu inainte sa-mi creeze acele liste comune pentru exponenti.
O sa am atatea liste cati reduceri am si incep de la [2... r+1] exponenti.Listele comune contin si
elemente duplicate.Aici vor interveni threadurile reducer care imi vor elimina duplicatele.Pe forum
se recomanda sa folosim o structura de tip unordered_set cate nu permite elementele duplicate.Iterez
prin listele comune si fiecare thread de tip Map are propriul set caracteristic fiecarui exponent.
Tot in threadul de tip reducer creez numele dorit ca format pentru fisierul de output si scriu in
fisier size-ul setului meu.Mentionez ca imi creez toate threadurile reducer si map in acelasi for si
la fel si pentru join.
